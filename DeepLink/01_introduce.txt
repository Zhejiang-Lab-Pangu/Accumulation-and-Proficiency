介绍

1. 系统软件一般是指用于管理计算机本身的软件，可分为两部分：
    (1) 平台性的。如操作系统内核、驱动程序、运行库、数以千计的系统工具；
    (2) 用于程序开发的。如编译器、汇编器、链接器等开发工具和开发库。

2. 调用层级：
    (1) 开发工具与应用程序都使用一个下层接口：应用程序编程接口API(Application Programming Interface)。应用程序接口的提供者是运行库，什么样的运行库提供什么样的API。
    (2) 运行库使用操作系统提供的系统调用接口(System call Interface)。系统调用接口在现实中往往以软件中断(Software Interrupt)的方式提供。
    (3) 操作系统内核层对于硬件层来说是硬件接口的使用者，硬件是接口的定义者；硬件的接口定义决定了操作系统内核。

3. 操作系统做什么
    (1) 操作系统的一个功能是提供抽象的接口，另一个主要功能是管理硬件资源。
    (2) MMU一般集成在CPU内部，将CPU发出的Virtual Address转变为Physical Address。

4.多线程
    (1) 一个标准的线程由线程ID、当前指令指针(PC)、寄存器集合、堆栈组成；同一个进程的多个线程共享程序的内存空间(代码段、数据段、堆等)和一些进程级资源(如打开文件和信号)。
    (2) 线程私有的存储空间一般包括：栈、线程局部存储(TLS)、寄存器。
    (3) 单指令的操作成为原子的(Atomic)，因为单条指令的执行是不会被打断的。
    (4) 访问同步：在一个县城访问数据未结束的时候，其他的线程不得对同一个数据进行访问；这样对数据的访问就原子化了。
        a. 同步最常使用的方法是锁。每个线程在访问数据或资源之前首先试图获取锁，并在访问结束之后释放锁，锁被占用时线程等待，直到锁重新可用；
        b. 二元信号量：最简单的锁。只有两种状态，占用和非占用，系统中所有线程都可以获取和释放；
        c. 信号量：多元信号量。
        d. 互斥量(Mutex)：和二元信号量类似，但互斥量要求是哪个线程获取了互斥量，哪个线程就要负责释放这个锁；但一个进程创建了一个互斥量，另一个进程去获取该锁是合法的；
        e. 临界区：比互斥量更加严格的同步手段；和互斥量的区别在于，临界区的作用范围仅限于本进程，其他进程无法获取该锁，其他和互斥量相同；
        f. 读写锁：读写锁有两种获取方式，共享的和独占的；有3种状态，自由、共享、独占；
        g. 条件变量：条件变量可以让多个县城一起等待某个事件的发生，当实现发生(条件变量被唤醒)，所有线程可以一起恢复执行。
    (5) volatile可以做到的：
        a. 阻止编译器为了提高速度将一个变量缓存到寄存器内而不写回；
        b. 阻止编译器调整操作volatile变量的操作顺序；
5.        

