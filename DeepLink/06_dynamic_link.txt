动态链接

1. 为什么要动态链接
1.1 内存和磁盘空间
    在静态链接情况下，多个可执行文件链接相同的模块(如目标文件)时。在磁盘和内存中都需要相同的副本，造成很大的空间浪费。
1.2 程序开发和发布
    若程序的可执行文件所需的一个目标文件更新，则需要重新链接，形成新的可执行文件，再发布给用户。
1.3 动态链接
    (1) 动态链接基本思想：将程序的模块分割开来，不再静态的链接在一起，即不对那些组成程序的目标文件进行链接，等到程序运行时才进行链接。也即：把链接这个过程推迟到了运行时再进行。
    (2) 动态链接会在内存中只有一个共享的目标文件，不会存在多个副本；那么在磁盘中存储的也是链接前的目标文件，共享目标文件也只用存储一份即可，需要时加载至内存即可。
    (3) 在内存中共享一个目标文件模块的好处：不仅可以节省内存，还可以减少物理页面的换入换出，也可以增加CPU的缓存命中率，因为不同进程的数据和指令访问都集中在同一个共享模块上。
1.4 程序可扩展性和兼容性
    (1) 程序的插件：动态链接时程序在运行时可以动态地选择加载各种程序模块，这个优点被用来制作程序的插件；
    (2) 操作系统所提供的动态链接库相当于在程序和操作系统之间增加了一个中间层，从而消除了程序对不同平台之间依赖的差异性。
1.5 动态链接的基本实现
    (1) 动态链接的基本思想是吧程序按照模块拆分成各个相对独立的部分，在程序运行时才将它们链接在一起形成一个完成的程序，而不是像静态链接一样把所有的程序模块都链接成一个单独的可执行文件。
    (2) Linux系统中，ELF动态链接文件被称为动态共享对象(DSO)，简称共享对象，一般以“.so”为扩展名；Windows系统中，动态链接文件被称为动态链接库(DLL)，一般以“.dll”为扩展名。
    (3) Linux中，常用的C语言库的运行库glibc，其动态链接形式的版本保存在“/lib”目录下，名为“libc.so”；整个系统只保留了一份C语言库的动态链接文件“libc.so”，所有C语言编写的、动态链接的程序都可以在运行时使用它；
        具体地：当程序装载时，系统的动态链接器会将程序所需要的所有动态链接库(最基本的就是libc.so)装载到进程的地址空间，并将程序中所有未决议的符号绑定到相应的动态链接库中，并进行重定位工作。
    (4) 动态链接器是把链接过程从原来的程序装载前推迟到了装载的时候；动态链接的确会导致程序在性能上的一些损失，但动态链接的链接过程可以进行优化(如延迟绑定等方法)，可尽可能的减少性能损失。

2. 简单的动态链接例子
    2.1 将Lib.c文件编译成共享对象文件：gcc -fPIC -shared -o lib.so Lib.c    其中，-shared 表示产生共享对象
    2.2 模块(Module) 
        (1) 静态链接时，整个程序最终只有一个可执行文件，它是一个不可分割的整体；
        (2) 动态链接时，一个程序被分成若干文件，包括程序的主要部分，即可执行文件和程序所依赖的共享对象，也可以将这些部分称为模块，即动态链接下的可执行文件和共享对象都可看作程序的一个模块。
    2.3 当链接器将目标文件链接成可执行文件时，链接器必须去定目标文件中所调用函数的性质：
        (1) 若函数是一个定义在其他静态目标模块中的函数，那么链接器按照静态链接规则对函数地址进行重定位；
        (2) 若函数是一个定义在某个动态共享对象中的函数，那么链接器会将这个符号的引用标记为一个动态链接的符号，不进行地址重定位，将此过程留到装载时再进行；
        (3) 在动态链接时仍要用到共享对象，因为其保存了完整的符号信息，链接器在解析符号时就可以知道，哪些符号是动态符号。
    2.4 动态链接程序运行时地址空间分布
        (1) Linux下的动态链接器(在/lib/ld_xxx.so)，会与普通共享对象一样被映射到进程的地址空间，在系统开始运行程序前，会先将控制权交给动态链接器，由其完成所有动态链接工作后再把控制权交还给程序，再开始执行。
        (2) 共享对象的最终装载地址在编译时是不确定的，而是在装载时，装载器根据当前地址空间的空闲情况，动态分配一块足够大小的虚拟地址空间给相应的共享对象。

3. 地址无关代码
3.1 固定装载地址的问题
    是否可以让共享对象在任意地址加载？  也即：共享对象在编译时不能假设自己在进程虚拟地址空间中的位置。
3.2 装载时重定位
    (1) 装载时重定位：在链接时，对所有绝对地址的引用不作重定位，而是推迟到装载时再完成；一旦程序模块装载地址确定，即目标地址确定，那么系统就对程序中所有的绝对地址引用进行重定位。
3.3 地址无关代码
    (1) 地址无关代码(PIC)的技术：把共享对象中需要修改的那部分指令分离出来，跟数据部分放在一起，这样指令部分就可以保持不变，而数据部分可以在每个进程中拥有一个副本；
    (2) 共享模块中各类型的地址引用方式：
        a. 模块内部的函数调用、跳转：
            模块内部的跳转、函数调用都可以是相对地址调用，或是基于存储器的相对调用，所以这些指令是不需要进行重定位的；
        b. 模块内部数据访问
            一个模块在内存中，前面一般是若干页的代码，后面紧跟若干页的数据，这些页之间的相对位置是固定的，也即任何一条指令与其要访问的模块内部数据间的相对位置是固定的，那么只需要相对于当前指令加上固定的偏移量即可访问模块内部数据。
        注： a) esp寄存器：Stack Pointer的缩写，称为“堆栈指针”，在x86架构中，esp寄存器通常用于指向当前线程的栈顶；
            b) ecx寄存器：Count Register， “计数寄存器”，通常用于循环计数和某些特定指令。
        c.模块间数据访问
            其他模块的全局变量的地址是跟装载地址相关的，即该地址在装载时才能确定，因此需要讲这些指令放到数据段中去；ELF在数据段里面建设了一个指向这些变量的指针数组，即全局偏移表(GOT);
            当指令要访问其他模块的变量时，程序会先找到GOT，再根据GOT中变量所对应的项找到变量的目标地址；每个变量都对应一个地址，链接器在装载模块时会查找每个变量所在的地址，然后填充GOT中的各个项，确保每个指针指向的地址正确；
            由于模块在编译时可以确定模块内部变量相对于当前指令的偏移，那么在编译时也可以确定当前指令相对于GOT的偏移，因此确定GOT的位置跟访问模块内部数据的方法是一致的，然后再根据变量地址在GOT中的偏移就可以得到变量的地址。
        d.模块间的函数调用、跳转
            GOT中相应项保存了目标函数的地址，当模块调用目标函数时，可以通过GOT中的项进行间接跳转。此种方法存在一些性能问题，ELF采用的是更为复杂和精巧的方法。
    (3) -fPIC 和 -fpic
        添加“-fPIC”参数，可使GCC产生地址无关代码；其中"-fpic"功能相同，但产生的代码要更小，而且较快，但在某些平台会有一些限制;
        PIC的so时不包含任何代码段重定位表的，“TEXTREL”表示代码段重定位表地址，因此可用 “readelf -d xxx.so | grep TEXTREL” 来判断某个so是不是PIC的。
    (4) PIC除了可用在共享对象上，也可用于可执行文件，一个以地址无关方式编译的可执行文件被称作地址无关可执行文件(PIE)，GCC产生PIE的参数为“-fPIE”或“-fpie”。
3.4 共享模块的全局变量问题
    (1) ELF共享库在编译时，默认将定义在模块内部的全局变量当作定义在其他模块的全局变量，通过GOT来实现变量访问；当共享模块被装载时，若某个全局变量在可执行文件中有副本，则动态链接器会把相应地址指向该副本，这样该变量在运行时实际上最终只有一个实例。
    (2) 若变量在共享模块中被初始化，那么动态链接起还需要将该初始化的值复制到程序主模块中的变量副本；若该全局变量在程序主模块中没有副本，那么GOT中的相应地址就指向模块内部的该变量副本。
    (3) 共享对象lib.so中定义了全局变量G，进程A、B都是用了lib.so，当进程A改变这个全局变量G的值时，进程B中的G会受影响吗？答：不会，当lib.so被两个进程加载时，数据段在每个进程中都有独立的副本。


4. 延迟绑定(PLT)
4.1 动态链接的性能损失
    (1) 动态链接比静态链接灵活的多，但这是以牺牲一部分性能为代价的。据统计ELF程序在静态链接下要比动态库稍微快点，大约1%～5%，这去居于程序本身的特性及运行环境等；
    (2) 动态链接比静态链接慢的主要原因：
	a.动态链接下对于全局和静态的数据访问都要进行复杂的GOT定位，然后间接寻址；
	b.动态链接的链接工作在运行时完成，即程序开始时，动态链接器都要进行一次链接工作（具体就是要解决模块之间的函数引用的符号查找及重定位）。
4.2 延迟绑定实现
   (1) 基本思想：当函数第一次被用到时才进行绑定（符号查找、重定位等），如果没有用到则不进行绑定。
   (2) 好处：程序开始执行时，模块间的函数调用都没有进行绑定，而是需要用到时才由动态链接起负责绑定；此举可以大大加快程序的启动速度，特别有利于一些有大量函数引用和大量模块的程序。
   (3) 实现原理：PLT为了实现延迟绑定，在GOT跳转的过程中又添加了一层间接跳转。调用函数首先会通过PLT项来进行跳转(每个外部函数在PLT中都有一个相应的项)，为实现PLT，链接器在初始化时并没有将要引用的函数地址填入到GOT对应的项中，而是将要引用函数在重定位表(.rel.plt)的下标和要引用模块的ID作为参数，调用动态链接器的_dl_runtime_resolve()函数完成符号绑定和重定位工作；_dl_runtime_resolve函数会进行一系列工作将引用函数的地址填入到GOT的相应项中。
   (4) ELF将GOT拆分为两个表：“.got”和“.got.plt”，其中.got保存全局变量引用的地址，.got.plt用来保存函数引用的地址，也即对于模块所有的外部函数的引用都被分离出来放在了.got.plt中，其中.got.plt的前3项有特殊含义，具体如下：
	a. 第一项保存的是".dynamic"段的地址，这个段描述了本模块动态链接的相关信息；
	b. 第二段保存的是本模块的ID；
	c. 第三段保存的是_dl_runtime_resolve()的地址
其中，第二项和第三项是在动态链接器在装载共享模块时负责初始化的;除了这3项，其余项分别对应每个外部函数的引用。
4.3 PLT在ELF文件中以独立的段存放，段名通常叫做".plt"，由于其本身是一些地址无关代码，因此在装载时可以和代码段等一起合并成一个可读可执行的"Segment"。


5. 动态链接相关结构
5.1 动态链接的程序执行过程
    动态链接情况下，操作系统在装载完可执行文件之后，会先启动一个动态链接器(动态链接器ld.so实际上是一个共享对象)，操作系统同样通过映射的方式将其加载到进程的虚拟地址空间中；之后操作系统就将控制权交给动态链接器的入口地址(与可执行文件一样，共享对象也有入口地址)，动态链接得到控制权后会开始执行一系列自身的初始化操作，然后根据当前环境参数开始对可执行文件进行动态链接工作；当所有动态链接工作完成后，动态链接器会将控制权转交给可执行文件的入口地址，程序开始正式执行。
5.2 ".interp"段
    (1) 动态链接器的位置不是由系统配置指定，也不由环境参数指定，而是由ELF可执行文件指定的；ELF可执行文件中有一个专门的".interp"段，其中保存了一个字符串，这个字符串就是需要的动态链接器的路径；
    (2) 动态链接器在Linux下是Glibc的一部分，也就是属于系统库级别，其版本号和系统中的Glibc版本号是一样的；一般会维护/lib64/ld-linux-x86-64.so.2或在/lib/目录下的软连接，当系统中的Glibc更新，软链会指向新的动态链接器；而可执行文件本身不需要修改".interp"中动态链接器的路径来适应系统的升级。
    (3) 查看ELF可执行文件的动态链接器的位置：readelf -l a.out | grep interpreter
5.3 ".dynamic"段
    (1) 动态链接ELF中最重要的结构应是".dynamic"段，这个段里面保存了动态链接器所需要的基本信息，如依赖哪些共享对象、动态链接符号表的位置、动态链接重定位表的位置、共享对象初始化代码地址等；
    (2) ".dynamic"段里面保存的信息和ELF文件头很类似，而ELF文件头中保存的是静态链接时的相关内容(如符号表、重定位表等)，因此".dynamic"段可看作动态链接下ELF文件的文件头；
    (3) 查看".dynamic"段的内容： readelf -d lib.so
5.4 动态符号表
    (1) Program1程序依赖与Lib.so，引用其中的foobar()函数；则对于Program1来说，称Program1导入(import)了foobar()函数，foobar是Program1的导入函数(Import Function)；对于Lib.so来说，称Lib.so导出(Export)了foobar()函数，foobar是Lib.so的导出函数(Export Function)。
    (2) 为了表示动态链接这些模块之间的符号导入导出关系，ELF专门有一个动态符号表的段来保存这些信息，段名为".dynsym"。与静态链接下的".symtab"不同，".dynsym"只保存了与动态链接相关的符号。很多时候动态链接的模块同时有".dynsym"和".symtabl"两个表，".symtab"中保存了所有符号，包括".dynsym"中的符号；
    (3) 与".symtab"类似，动态符号表也需要一些辅助表，如用于保存符号名称的字符串表，静态链接时称为符号字符串表".strtab"，动态链接时称为动态符号字符串表".dynstr"；另外由于在动态链接是运行时查找符号，为了加快符号查找过程，往往还有辅助的符号哈希表".hash"。查看ELF文件的动态符号表及哈希表： readelf -sD Lib.so
5.5 动态链接重定位表
    (1) 共享对象为什么要重定位表？
	共享对象需要重定位的主要原因是导入符号的存在。动态链接下，无论是可执行文件还是共享对象，一旦其依赖于其他共享对象时，也即有导入的符号时，那么它的代码或数据中就会有对于导入符号的引用。在编译时这些导入符号的地址未知，在静态链接中，这些未知的地址引用在最终链接时被修正；但在动态链接中，导入符号的地址在运行时才确定，所以需要在运行时将这些导入符号的引用修正，即需要重定位。
    (2) 动态链接重定位相关结构
	类似于在静态链接中，目标文件中包含专门用于表示重定位信息的重定位表(".rel.text"表示代码段的重定位表，".rel.data"是数据段的重定位表)，在动态链接中，也有代码段重定位表".rel.plt"和数据段重定位表".rel.dyn"，其中".rel.dyn"是对数据引用的修正，它所修正的位置位于".got"以及数据段，而".rel.plt"是对函数引用的修正，其所修正的位置位于".got.plt"。查看动态链接的文件的重定位表：readelf -r Lib.so
    (3) 导入函数的重定位入口不仅会出现在".rel.plt"中，也会出现在".rel.dyn"中；这是因为如果ELF文件以PIC模式进行编译(动态链接的可执行文件一般是PIC的)，并调用外部函数，则该外部函数会出现在".rel.plt"中，若不是以PIC模式进行编译，则会出现在".rel.dyn"中。
5.6 动态链接时进程堆栈初始化信息
    (1) 当操作系统将控制权交给动态链接器是，其要进行链接工作必须要指导关于可执行文件和本进程的一些信息，如可执行文件有几个"Segment"、每个段的属性、程序的入口地址等，这些信息通常由操作系统传递给动态链接器，保存在进程的堆栈里面；此外堆栈里面还保存了动态链接器所需要的一些辅助信息数组。


6. 动态链接的步骤和实现
6.1

7. 显示运行时链接

本章小结
