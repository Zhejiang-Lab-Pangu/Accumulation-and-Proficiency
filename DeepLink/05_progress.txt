可执行文件的装载与进程


1. 进程虚拟地址空间
1.1 每个程序运行起来后，将拥有自己独立的虚拟地址空间（Virtual Adress Space），此空间大小由CPU的位数决定；硬件决定了地址空间的最大理论上限，即硬件的寻址空间大小，如:
    (1) 32位硬件平台决定了虚拟地址空间的地址为 0 ～ 2^32-1，即0x00000000 ~0xFFFFFFFF，即我们常说的4GB虚拟空间大小;
    (2) 64位硬件平台具有64位寻址能力，其虚拟地址空间大小达到了 2^64 byte，总共17 179 869 184 GB;
    (3) 可通过C语言的指针大小来判断虚拟空间的大小：指针大小的位数与虚拟空间的位数相同，即32位平台指针大小32bit，即4字节；64位平台指针大小64bit，即8字节。
1.2 进程的虚拟地址空间均在操作系统的掌握之中，进程只能使用那些操作系统分配给进程的地址，若访问未经允许的空间，操作系统就会捕获这些访问，将进程的这种访问当作非法操作，强制结束进程。（如‘Segmentation fault’）


2. 装载的方式
    动态装入的基本原理：程序运行是有局部性原理的，将程序最常用的部分驻留在内存中，将一些不常用的数据放在磁盘里面。动态装载方法有：覆盖装入（Overlay）和 页映射（Paging）。
2.1 覆盖装入 （无虚拟内存之前的方法）
2.2 页映射（Paging）
    (1) 页映射是虚拟存储机制的一部分。页映射是将内存和所有磁盘中的数据和指令按照“页”为单位划分成若干个页，后续所有的装载和操作的基本单位就是页。


3. 从操作系统角度看可执行文件的装载
3.1 进程的建立
    创建一个进程，然后装载相应的可执行文件并执行。在有虚拟存储的情况下，需要经历3个过程：
    (1) 创建一个独立的虚拟地址空间；
        一个虚拟空间由一组页映射函数将虚拟空间的各个页映射至相应的物理空间，创建一个虚拟空间实际上不是创建空间，而是创建映射函数所需要的相应的数据结构；
    (2) 读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系：
        可执行文件和虚拟空间的映射关系是保存在操作系统内部的一个数据结构。Linux将进程虚拟空间中的一个可执行文件段的存放区域叫做 虚拟内存区域(VMA)， Windows上叫 虚拟段(Virtual Section).
    (3) 将cpu的指令寄存器设置成可执行文件的入口地址，启动执行：
        操作系统通过设置CPU的指令寄存器将控制权交给进程，开始执行。
3.2 页错误
    当CPU开始打算执行某个地址的指令时，发现页面是空页面，此时CPU就认为这是一个页错误。CPU将控制权交给操作系统，操作系统由专门的页错误处理例程来处理这种情况。
    此时，操作系统将查询可执行文件和虚拟空间映射关系的数据结构，然后找到空页所在的VMA，计算出相应的页面在可执行文件中的偏移，再在物理内存中分配一个物理页面，建立进程中该虚拟页与分配的物理页之间映射关系，随后把CPU控制权还给进程，进程从刚才也错误位置重新开始执行。
    随着进程的执行，页错误不断产生，操作系统会为进程分配相应的物理页来满足进程的需求；若进程所需的内存超过可用的内存数量(特别是多个进程同时执行时)，此时操作系统需要精心组织和分配物理内存，甚至会收回以分配给进程的内存，更多细节参考操作系统的虚拟内存管理。


4. 进程虚存空间分布
4.1 ELF文件的链接视图和执行试图
    (1) 操作系统装载可执行文件实际上并不关心可执行文件各个段的实际内容，其最关心的是段的权限(可读、可写、可执行)。在ELF文件中，段的权限基本可分为：
        a. 以代码段为代表的权限为可读可执行的段；
        b. 以数据段和BSS段为代表权限为可读可写的段；
        c. 以只读数据段为代表的权限为只读的段。
    (2) 操作系统为了减少内存浪费，会将ELF文件具有相同权限的段合并到一起当成一个段进行映射。
    (3) ELF可执行文件引入了一个概念叫“Segment”，一个Segment包含一个或多个类似属性类似的“Section”，则在装载的时候就可以将他们看成一个整体一起映射，也即映射后再进程虚拟空间只能够只有一个相对应的VMA，，而不是两个，减少内部碎片，从而节省空间。
    (4) Segment的概念实际上是从装载的角度重新划分了ELF的各个段。在将目标文件链接成可执行文件时，链接器会尽量将相同权限属性的段分配到同一空间。
    (5) "Segment"和"Section"是从不同角度来划分同一个ELF文件，即不同的ELF视图(View)，从Section角度来看ELF文件就是 链接视图(Linking View)，从Segment角度看就是 执行试图(Execution View)。
4.2 队和栈
    (1) 操作系统功过VMA来对进程的地址空间进行管理。即操作系统通过给进程空间划分出一个个VMA来管理进程的虚拟地址空间，划分的基本原则是将相同权限属性的、有相同映像(ELF可执行文件)文件的映射成一个VMA。
    (2) 一个进程的虚拟地址空间基本上可分为如下几种VMA区域：
        a. 代码VMA：权限可读、可执行，有映像文件；
        b. 数据VMA：权限可读、可写、可执行，有映像文件；
        c. 堆VMA：权限可读、可写、可执行；无映像文件，匿名，可向上扩展；
        d. 栈VMA: 权限可读、可写、可执行；无映像文件，匿名，可向下扩展。
        ｜--------------------------｜
        ｜      Stack   VMA         ｜
        ｜--------------------------｜
        ｜      v v v v v v v       ｜
        ｜                          ｜
        ｜      ^ ^ ^ ^ ^ ^ ^       ｜
        ｜--------------------------｜
        ｜      Heap    VMA         ｜
        ｜--------------------------｜
        ｜      Data    VMA         ｜
        ｜--------------------------｜
        ｜      Code    VMA         ｜
        ｜--------------------------｜
4.3 堆的最大申请数量
    malloc的最大申请数量实际上会受到操作系统版本、程序本身大小、用到的动态/共享库数量和大小、程序栈数量和大小等的影响。
4.4 段地址对齐
    可执行文件的装载过程是通过虚拟内存的页映射机制完成的。在影射过程中，页是映射的最小单位。
4.5 进程栈初始化
    进程刚开始启动时，需要知道一些系统环境变量和进程运行参数，操作系统在进程启动前会将这些信息提前保存到进程的虚拟空间的栈中(Stack VMA)。


5. Linux内核装载ELF过程简介
    在Linux系统的bash下输入一个命令执行某个ELF程序时，Linux是如何装载这个ELF文件并执行它的？
    用户层面：
        (1) bash 进程调用fork()系统调用创建一个新的进程；
        (2) 新的进程调用 execve() 系统调用执行指定的ELF文件；
        (3) 原先的bash进程继续返回等待刚才的启动新进程结束，然后继续等待用户输入命令。
    Linux内核态：
        (1) 进入execve() 系统调用后，Linux内核开始进行真正的装载工作；
        (2) 内核中，execve()系统调用相应的入口是 sys_execve()，其进行一些参数的检查和复制，然后调用do_execve();
        (3) do_execve() 先查找被执行的文件，若找到，读取文件的前128字节的文件头部，来确定可执行文件的格式（Linux 支持elf、a.out、java程序和各种脚本语言），然后调用search_binary_handle()；
        (4) search_binary_handle() 会去搜索和匹配合适的可执行装载处理过程。(Linux中所有被支持的可执行文件格式都有相应的装载处理过程，如load_elf_binary()、load_aout_binary、load_script()等)；
        (5) load_elf_binary() 的主要步骤：
            a. 检查可执行文件格式的有效性，如魔数、程序头表中Segment的数量；
            b. 寻找动态链接的".interp" 段，设置动态链接路径；
            c. 根据ELF可执行文件的程序头表的描述，对ELF文件进行映射，如代码、数据、只读数据；
            d. 初始化ELF进程环境；
            e. 将系统调用的返回地址修改成elf可执行文件的入口点，这个入口点取决于程序的链接方式。
        (6) load_elf_binary() 执行完成后，返回至do_execve()，再返回至sys_execve()时，当sys_execve()系统调用从内核态返回至用户态时，EIP寄存器直接跳转到ELF程序的入口地址，新的进程开始执行，ELF可执行文件装载完成。


小结
1. 进程虚拟地址空间是什么？ 
2. 操作系统如何为程序的代码、数据、堆、栈在进程地址空间中分配？他们是如何分布的？

